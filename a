
using System;

namespace Binomial
{

    public class Options 
    {
        static void Main()
        {
	    double strike = 90;
            double underlyingPrice = 102;
            double yearsToExpiry = 0.5;
            double vol = 0.25;
            double riskFreeRate = 0.06;
            double dividendYield = 0;
            int nSteps = 5;
	    int t0 = 0;

            double b = riskFreeRate - dividendYield;
            double dt = yearsToExpiry / nSteps;
            double u = Math.Exp(vol * Math.Sqrt(dt));
            double d = 1.0 / u;
            double a = Math.Exp(b * dt);
            double p = (a - d) / (u - d);
            double df = Math.Exp(-riskFreeRate * dt);

            Console.WriteLine("The European Call option value is : " + BinomialTree(strike,underlyingPrice,yearsToExpiry,vol,riskFreeRate,dividendYield,PutCallFlag.Call, true ,nSteps));
            Console.WriteLine("The American Call option value is : " + BinomialTree(strike,underlyingPrice,yearsToExpiry,vol,riskFreeRate,dividendYield,PutCallFlag.Call, false ,nSteps));
	    Console.WriteLine("The European Put option value is : " + BinomialTree(strike,underlyingPrice,yearsToExpiry,vol,riskFreeRate,dividendYield,PutCallFlag.Put, true ,nSteps));
            Console.WriteLine("The American Put option value is : " + BinomialTree(strike,underlyingPrice,yearsToExpiry,vol,riskFreeRate,dividendYield,PutCallFlag.Put, false ,nSteps));
	    Console.WriteLine(" a = "+ a);
            Console.WriteLine(" u = " + u);
            Console.WriteLine(" d = " + d);
            Console.WriteLine(" probability of up move is = " + p);
            Console.WriteLine(" probability of down move is = " + (1-p));
        }
	
	 public enum PutCallFlag //identifies if the option is a put or a call 
        {
            Put, Call
        }
	
            // Cox-Ross-Rubinstein Binomial Tree
         
           public static double BinomialTree(double strike, double underlyingPrice, double yearsToExpiry, double vol, double riskFreeRate, double dividendYield, PutCallFlag putCallFlag, bool isEuropean, int nSteps)
            {
	    
                double b = riskFreeRate - dividendYield; //calculates the rf-dividend to be used in probability up/down moves
                double[] optionValueArray = new double[nSteps + 1]; //creates an array of option values for each step (starts at zero which is option value)
                double dt = yearsToExpiry / nSteps; // calculates the time length of each step
                double u = Math.Exp(vol * Math.Sqrt(dt)); // calculates probability of up movement
                double d = 1.0 / u; // calculates probability of down movement
                double a = Math.Exp(b * dt); // calcuates risk neutral probility of up movement
                double p = (a - d) / (u - d); // calculates maginitude of up movement (1-p calculates magnitude of down movement)
                double df = Math.Exp(-riskFreeRate * dt); //calculates discount factor used for each step in recursive fashion

                int z; //Z dictates if option is a put or a call by use of 1/-1
                if (putCallFlag == PutCallFlag.Call)
                    z = 1;
                else z = -1;


		//Creates the stock price underlying array by taking the max of 0 or up/down movement (the z variable which has 1/-1 changes the sign on the (option value - strike for put /call)  
                for (int i = 0; i <= nSteps; i++)
                    optionValueArray[i] = Math.Max(0, z * (underlyingPrice * Math.Pow(u, i) * Math.Pow(d, nSteps - i) - strike));
		

		// Goes backwards in the array to calculate the option value recursively and has an. if function to identify if american or european.
                for (int j = nSteps - 1; j >= 0; j--)
                {
                    for (int i = 0; i <= j; i++)
                    {
                        double e = df * (p * optionValueArray[i + 1] + (1 - p) * optionValueArray[i]);
                        if (isEuropean)
                        {
                            optionValueArray[i] = e;
                        }
                        else
                        {
                            double intrinsic = z * (underlyingPrice * Math.Pow(u, i) * Math.Pow(d, j - i) - strike);
                            optionValueArray[i] = Math.Max(intrinsic, e);
                        }
                    }
                }
		
                return optionValueArray[0]; // returns the first step in the array which is the option value
            }


        }
    }
}


